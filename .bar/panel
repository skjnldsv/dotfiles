#! /bin/sh
# Lemonbar panel (zsh required for icons)
########################

########################
# SOURCE CONFIG
. $(dirname $0)/lemonbar_config

########################
# export PANEL_FIFO PANEL_HEIGHT PANEL_FONT_FAMILY

if [ $(pgrep -cx panel) -gt 1 ] ; then
	printf "%s\n" "The panel is already running." >&2
	exit 1
fi

trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

########################
# Prepare panel fifo
[ -e "$PANEL_FIFO" ] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"

########################
# bspc desktops
bspc config top_padding $PANEL_HEIGHT
bspc subscribe report > "$PANEL_FIFO" &

########################
# Active window title
xtitle -sf 'T%s' > "$PANEL_FIFO" &

########################
# Plex play
#zscroll -n -u -b "L " -d 0.2 -M "sh plexstatus.sh status" -m "No playing" -b "L " -s 0 -m "playing" -b "L$ICON_PLAY " -s 1 -m "paused" -b "L$ICON_PAUSE " -s 0 "sh plexstatus.sh" > "$PANEL_FIFO" &

########################
# LOCK
echo L$ICON_LOCK > $PANEL_FIFO &

########################
# POWER
echo P$ICON_POWER > $PANEL_FIFO &

########################
# CLOCK
while true;
	do
		echo C$ICON_CLOCK $(date | grep  -Eo '[[:digit:]]{1,2}:[[:digit:]]{1,2}:[[:digit:]]{1,2}');
	sleep 1;
done > "$PANEL_FIFO" &

########################
# VOLUME
while true;
	do
		ALSA_VOLUME=$(amixer get Master | grep 'Left: Playback' | grep -o '...%' | sed 's/\[//' | sed 's/%//' | sed 's/ //')
		ALSA_STATE=$(amixer get Master | grep 'Left: Playback' | grep -o '\[on]')

		if [ $ALSA_VOLUME -ge 90 ]
		then
			VOL_ICON=$ICON_VOLMAX
			VOL=V$(urgent $VOL_ICON $ALSA_VOLUME)
		fi
        if [ $ALSA_VOLUME -ge 70 -a $ALSA_VOLUME -lt 90 ]
		then
			VOL_ICON=$ICON_VOLMAX
			VOL="V$VOL_ICON $ALSA_VOLUME"
		fi
        if [ $ALSA_VOLUME -ge 50 -a $ALSA_VOLUME -lt 70 ]
		then
			VOL_ICON=$ICON_VOLMED
			VOL="V$VOL_ICON $ALSA_VOLUME"
		fi
		if [ $ALSA_VOLUME -ge 30 -a $ALSA_VOLUME -lt 50 ]
		then
			VOL_ICON=$ICON_VOLLOW
			VOL="V$VOL_ICON $ALSA_VOLUME"
		fi
		if [ $ALSA_VOLUME -gt 0 -a $ALSA_VOLUME -lt 30 ]
		then
			VOL_ICON=$ICON_VOLMIN
			VOL="V$VOL_ICON $ALSA_VOLUME"
		fi
		if [ $ALSA_VOLUME -eq 0 ]
		then
			VOL_ICON=$ICON_VOLMUTE
			VOL=V$(low $VOL_ICON $ALSA_VOLUME)
		fi

		if [ $ALSA_STATE ]
		then
			echo $VOL
		else
			echo "V$(low $ICON_VOLMUTE $ALSA_VOLUME)"
		fi
	sleep 0.5

done > $PANEL_FIFO &

########################
# CPU + HDD + NETMONITOR
conky -c $(dirname $0)/lemonbar_conky > "$PANEL_FIFO" &

########################
# Mail
while true;
	do
		mailcount=$(curl -s -u '''xxxxxxxxxxx@gmail.com''':'''xxxxxxxxxxx*password*xxxxxxxxxxx''' https://mail.google.com/mail/feed/atom | egrep -o '<fullcount>([0-9]{1,3})<\/fullcount>' | egrep -ow '[0-9]{1,3}')
		if [ $mailcount -ne 0 ];
		then
			echo "M $mailcount"
		else
			echo "M $(low $mailcount)"
		fi;
	sleep 60
done > $PANEL_FIFO &

########################
# UPDATES
while true;
	do
		update_count=$(yaourt -Quua | wc -l)
		if [ $update_count -ne 0 ];
		then
			echo "U $update_count"
		else
			echo "U $(low $update_count)"
		fi;
	sleep 60
done > $PANEL_FIFO &

########################
# FORECAST
while true;
	do
		# Remove ?si for Fahrenheit units
		forecast=$(curl -s "https://api.forecast.io/forecast/$FORECAST_API/$FORECAST_LOC?units=si")

		temp=$(echo $forecast | jq -r ".currently.apparentTemperature")
		now=$(echo $forecast | jq -r ".currently.icon")
		next=$(echo $forecast | jq -r ".daily.data[0].icon")
		now=$(weathericon $now)
		next=$(weathericon $next)

		echo "F $temp$ICON_CEL $now $ICON_NEXT $next"
	sleep 300
done > $PANEL_FIFO &

########################
# GITHUB
while true;
	do
		github=$(curl -s "https://api.github.com/notifications?access_token=$GITHUB_API")

		github_count=$(echo $github | jq -r ". | length")
		if [ $github_count -ne 0 ];
		then
			echo "G $github_count"
		else
			echo "G $(low $github_count)"
		fi;
	sleep 60
done > $PANEL_FIFO &

########################
# CPU Temp
while true;
	do
		tempcpu=$(sensors | grep Physical | cut -c18-19)
		tempgpu=$(nvidia-smi -q -d temperature | grep "Current Temp" | cut -c 39-40)
		if [ $tempcpu -gt $CPU_TEMP_WARN_LEVEL ]
		then
			tempcpu="D $(urgent $tempcpu)째C"
		else
			tempcpu="D $tempcpu째C"
		fi;
		if [ $tempgpu -gt $GPU_TEMP_WARN_LEVEL ]
		then
			echo $tempcpu $(urgent $tempgpu)"째C"
		else
			echo $tempcpu $tempgpu"째C"
		fi;
	sleep 5
done > $PANEL_FIFO &

########################
# IP
while true;
	do
		IP=$(wget -t 2 -T 2 checkip.dyndns.org -q -O - | sed -e 's/.*Current IP Address: //' -e 's/<.*$//')
		if [ $IP ]
		then
			echo "I$IP"
		else
			IP2=$(wget -t 2 -T 2 duckduckgo.com/\?q\=whats+my+ip -q -O - | grep  -Eo '[[:digit:]]{1,3}(\.[[:digit:]]{1,3}){3}')
			if [ $IP2 ]
			then
				echo "I$IP2"
			else
				echo I$(urgent DISCONNECTED)
			fi;
		fi;
	sleep 5;

done > $PANEL_FIFO &

panel_bar < "$PANEL_FIFO" | lemonbar -g x$PANEL_HEIGHT -f "$PANEL_FONT_FAMILY" -f "$ICON_FORECAST" -f "$ICON_FONT1" -f "$ICON_FONT2" -f "$ICON_FONT_MENU" -F "$COLOR_FOREGROUND" -B "$COLOR_BACKGROUND" -u 2 -a 20 | zsh &

wait
